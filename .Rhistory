ftrNames <- as.matrix(fread(paste0(fpath, "features.txt"), select = c(2)))
ftrNames <- gsub("[()]", "", ftrNames)
## Read subject id
idtrain <- read.table(paste0(fpath,"train/", "subject_train.txt"), col.names = c("id"))
idtest <- read.table(paste0(fpath, "test/", "subject_test.txt"), col.names = c("id"))
## Read files
Xtrain <- read.table(paste0(fpath, "train/", "X_train.txt"), col.names = ftrNames)
ytrain <- read.table(paste0(fpath, "train/", "y_train.txt"), col.names = c("activity"))
Xtest <- read.table(paste0(fpath, "test/", "X_test.txt"), col.names = ftrNames)
ytest <- read.table(paste0(fpath, "test/", "y_test.txt"), col.names = c("activity"))
# Merge all data
# merge id, X, and y data for train and test
trainData <- cbind(idtrain, ytrain, Xtrain)
testData <- cbind(idtest, ytest, Xtest)
# merge training and test data
data <- rbind(trainData, testData)
# Convert label numbers to label names
data$activity <- factor(data$activity, levels=c(1,2,3,4,5,6),
labels = c("walking", "walking_upstairs", "walking_downstairs",
"sitting", "standing", "laying"))
# Create dataset with only mean and standard deviation data
# Procedure is out of order from assignment but this involved less typing and
# clearer code so I went ahead with it.
dataMnStd <- data[, c("id", "activity", grep("[Mm]ean", names(data), value=TRUE),
grep("[Ss]td", names(data), value=TRUE))]
# Create independent tidy data set that stores averages for each variable
# and subject
dataSummary <- aggregate(dataMnStd[, 3:length(dataMnStd)],
list(id = dataMnStd[, "id"],
activity = dataMnStd[, "activity"]),
FUN = "mean")
names(dataMnStd)
?substr
substr("abcdef", 2, 4)
?table
?separate
separate(dataMnStd, tBodyAccJerk.std.Y, c("fun", "axis"))
separate(dataMnStd[, "tBodyAccJerk.std.Y"], tBodyAccJerk.std.Y, c("fun", "axis"))
test<-separate(dataMnStd, tBodyAccJerk.std.Y, c("fun", "axis"))
View(test)
?gather
newnames <- gsub("\\..*", "", ftrNames)
View(newnames)
newnames <- gsub("\\..*", "", names(dataMnStd))
newnames
unique(newnames)
86/24
24*3
names(dataMnStd)
dataMnStd <- data[, c("id", "activity", grep("\\.mean", names(data), value=TRUE),
grep("\\.std", names(data), value=TRUE))]
names(dataMnStd)
dataMnStd <- data[, c("id", "activity", grep("\\.mean$", names(data), value=TRUE),
grep("\\.std$", names(data), value=TRUE),
grep("\\.mean\\.", names(data), value=TRUE))]
names(dataMnStd)
dataMnStd <- data[, c("id", "activity", grep("\\.mean$", names(data), value=TRUE),
grep("\\.std$", names(data), value=TRUE),
grep("\\.mean\\.", names(data), value=TRUE),
grep("\\.std\\.", names(data), value=TRUE))]
names(dataMnStd)
?aggregate
class(names(dataMnStd))
varnames <- names(dataMnStd)[3:length(dataMnStd)]
as.list(varnames)
list("fun", "axis")
keycol <- list("fun", "axis")
keyval <- as.list(varnames)
aggregate(dataMnStd, keycol, keyval, varnames, factor_key=TRUE)
keycol <- list("fn", "axis")
keyval <- as.list(varnames)
gather(dataMnStd, keycol, keyval, varnames, factor_key=TRUE)
newnames <- gsub("\\..*", "", names(dataMnStd))
varnames
newnames <- gsub("\\..*", "", varnames)
newnames <- unique(gsub("\\..*", "", varnames))
gather(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
17*3*2
keycols
keycols <- list("fn", "axis")
valcols <- unique(gsub("\\..*", "", varnames))
gather(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
keycols
valcols
valcols <- as.list(unique(gsub("\\..*", "", varnames)))
gather(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
dataMnStd2 <- dataMnStd[,1:20]
names(dataMnStd2)
?gather
keycols <- "fn"
valcols <- as.list(unique(gsub("\\..*", "", varnames)))
gather(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
gather_(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
keycols <- list("fn", "axis")
valcols <- as.list(unique(gsub("\\..*", "", varnames)))
test <- gather_(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
View(test)
varnames
test <- gather_(dataMnStd, keycols, valcols,
tBodyAccMag.mean:fBodyGyro.std.Z, factor_key=TRUE)
test <- gather(dataMnStd, keycols, valcols,
tBodyAccMag.mean:fBodyGyro.std.Z, factor_key=TRUE)
View(test)
test <- gather_(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
?gather_
keycols <- c("fn", "axis")
valcols <- unique(gsub("\\..*", "", varnames))
test <- gather_(dataMnStd, keycols, valcols, varnames, factor_key=TRUE)
View(test)
?reshape
reshape(dataMnStd, varying=3:length(dataMnStd), ivard="id")
reshape(dataMnStd, varying=3:length(dataMnStd), idvar="id")
reshape(dataMnStd, varying=3:length(dataMnStd), idvar="id", direction="long")
dataMnStd2 <- dataMnStd[1:20]
reshape(dataMnStd2, varying=3:length(dataMnStd2), idvar="id", direction="long")
names(dataMnStd2)
?order
View(dataSummary)
dataSummary <- order(dataSummary, c("id", "activity"))
order(dataSummary, c("id", "activity"))
order(dataSummary$id, dataSummary$activity)
dataSummary[order(dataSummary$id, dataSummary$activity), ]
rm(list=ls())
# Assignment for Getting and Cleaning Data
# Set filepath relative to working directory
fpath <- "./GettingAndCleaningData/Assignment/UCI HAR Dataset/"
# Read all data
## Read feature names and clean them
ftrNames <- as.matrix(fread(paste0(fpath, "features.txt"), select = c(2)))
ftrNames <- gsub("[()]", "", ftrNames)
## Read subject id
idtrain <- read.table(paste0(fpath,"train/", "subject_train.txt"), col.names = c("id"))
idtest <- read.table(paste0(fpath, "test/", "subject_test.txt"), col.names = c("id"))
## Read files
Xtrain <- read.table(paste0(fpath, "train/", "X_train.txt"), col.names = ftrNames)
ytrain <- read.table(paste0(fpath, "train/", "y_train.txt"), col.names = c("activity"))
Xtest <- read.table(paste0(fpath, "test/", "X_test.txt"), col.names = ftrNames)
ytest <- read.table(paste0(fpath, "test/", "y_test.txt"), col.names = c("activity"))
# Merge all data
## merge id, X, and y data for train and test
trainData <- cbind(idtrain, ytrain, Xtrain)
testData <- cbind(idtest, ytest, Xtest)
## merge training and test data
data <- rbind(trainData, testData)
## Convert label numbers to label names
data$activity <- factor(data$activity, levels=c(1,2,3,4,5,6),
labels = c("walking", "walking_upstairs", "walking_downstairs",
"sitting", "standing", "laying"))
# Create dataset with only mean and standard deviation data
## Procedure is out of order from assignment but this involved less typing and
## clearer code so I went ahead with it.
dataMnStd <- data[, c("id", "activity", grep("\\.mean$", names(data), value=TRUE),
grep("\\.std$", names(data), value=TRUE),
grep("\\.mean\\.", names(data), value=TRUE),
grep("\\.std\\.", names(data), value=TRUE))]
varnames <- names(dataMnStd)[3:length(dataMnStd)]
# Create independent tidy data set that stores averages for each variable
# and subject
dataSummary <- aggregate(dataMnStd[, 3:length(dataMnStd)],
list(id = dataMnStd[, "id"],
activity = dataMnStd[, "activity"]),
FUN = "mean")
dataSummary <- dataSummary[order(dataSummary$id, dataSummary$activity), ]
write.table(dataSummary, './tidyData.txt',row.names=TRUE,sep='\t')
write.table(dataSummary, './tidyData.txt',row.names=FALSE,sep='\t')
rm(list=ls())
close all
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
head(low)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v=12)
abline(v = 12, lwd = 2)
abline(v = median(ppm), lwd = 4, col = "magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg = table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(data = pollution, ppm ~ region, col = "red")
boxplot(ppm ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution$pm25, region == "west"), col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(pm25 ~ latitude))
with(pollution, plot(pm25 ~ latitude))
with(pollution, plot(latitude, pm25))
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west = subset(pollution, region == "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
library(swirl)
swirl()
cars
head(Cars)
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, data = airquality)
boxplot(Ozone ~ Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab  )
boxplot(Ozone ~ Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
?pch
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozon in NYC")
title(main = "Wind and Ozone in NYC")
?subset
may = subset(airquality, Month == 5)
may <- subset(airquality, Month == 5)
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
par("pch")
?pch
points(may, pch = 17, col="blue")
points(may, col="blue", pch = 17)
points(may$Wind, col="blue", pch = 17)
points(may$Wind, may$Ozone, col="blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch = 8)
clarify("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend"topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
?legend
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
?abline
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par("mfrow") = c(1,2)
par("mfrow")
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
setwd("C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1")
?png
?download.file
?read.rable
?read.table
data <- read.table(paste0(wdir, "/household_power_consumption.txt"), nrows = 10)
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
data <- read.table(paste0(wdir, "/household_power_consumption.txt"), nrows = 10)
rm(list=ls())
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
data <- read.table(paste0(wdir, "/household_power_consumption.txt"), nrows = 10)
data
View(data)
data <- read.table(paste0(wdir, "/household_power_consumption.txt"), sep = ";",
header = TRUE, nrows = 10)
data
names(data)
?strptime
data[,`Date`]
data[,"Date"]
strptime(data$Date)
as.Date(data$Date)
as.Date(data$Time)
as.POSIXlt(data$Time)
data$Time
class(data$Time)
strptime(data$Time, format = "POSIXlt")
as.POSIXct(data$Time)
strptime(data$Time, format = "POSIXct")
data$Time
as.character(as.POSIXlt(data$Time))
as.POSIXlt(as.character(data$Time))
as.POSIXct(data$Time, format = "%H:%M:%S")
as.POSIXlt(data$Time, format = "%H:%M:%S")
data <- read.table(paste0(wdir, "/household_power_consumption.txt"), sep = ";",
header = TRUE, nrows = 10)
data$Date
as.Date(data$Date)
as.Date(data$Date, format = "%D/%M/%Y")
as.Date(data$Date, format = "%d/%m/%Y")
strptime(data$Date, format = "%d/%m/%Y")
strptime(data$Time, format = "%H:%M:%S")
format(strptime(data$Time, format = "%H:%M:%S"), "%H:%M:%S")
exists(data)
exists("data")
if exists("data") != TRUE{
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
}
if (exists("data") != TRUE){
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
}
rm(list=ls())
data = c(1,2,3,?)
data = c(1,2,3,"?")
data[data == "?"] <- NA
rm("data")
if (exists("data") != TRUE){
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
}
data <- read.table(paste0(wdir, "/household_power_consumption.txt"), sep = ";",
header = TRUE)
exists("data")
data
rm(list=ls())
data
exists("data")
exists("data", envir = myEnvir)
ttss <- 42
exists("ttss")
rm("ttss")
exists("ttss")
if (exists("pwrConsData") != TRUE){
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
pwrConsData <- read.table(paste0(wdir, "/household_power_consumption.txt"), sep = ";",
header = TRUE)
}
head(pwrConsData)
pwrConsData[,"Date"] = as.Date(pwrConsData[, "Date"], format = "%d/%m/%Y")
pwrConsData[, "Time"] = format(strptime(pwrConsData[, "Time"], format = "%H:%M:%S"),
"%H:%M:%S")
pwrConsData[pwrConsData=="?"] <- NA
?where
?which
which(pwrConsData == "?")
which(pwrConsData$Global_active_power == "?")
qmidx <- pwrConsData[, 3:length(pwrConsData)] == "?"
rm("pwrConsData")
if (exists("pwrConsData") != TRUE){
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
pwrConsData <- read.table(paste0(wdir, "/household_power_consumption.txt"), sep = ";",
header = TRUE)
}
pwrConsData[pwrConsData == "?"] <- NA
pwrConsData[,"Date"] = as.Date(pwrConsData[, "Date"], format = "%d/%m/%Y")
pwrConsData[, "Time"] = format(strptime(pwrConsData[, "Time"], format = "%H:%M:%S"),
"%H:%M:%S")
hist(pwrConsData$Global_active_power)
hist(as.numeric(pwrConsData$Global_active_power))
?rep
str(pwrConsData)
rm("pwrConsData")
if (exists("pwrConsData") != TRUE){
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
pwrConsData <- read.table(paste0(wdir, "/household_power_consumption.txt"),
sep = ";",
header = TRUE,
colClasses = c("factor", "factor",
rep("numeric", 7)))
# code "?" as missing data and convert to NA
pwrConsData[pwrConsData == "?"] <- NA
# convert date and time column classes
pwrConsData[,"Date"] = as.Date(pwrConsData[, "Date"], format = "%d/%m/%Y")
pwrConsData[, "Time"] = format(strptime(pwrConsData[, "Time"], format = "%H:%M:%S"),
"%H:%M:%S")
}
if (exists("pwrConsData") != TRUE){
wdir <- "C:/Users/dvena/Dropbox/Courses/Data Science Specialization/ExplorData/Week1/ExData_Plotting1"
setwd(wdir)
pwrConsData <- read.table(paste0(wdir, "/household_power_consumption.txt"),
sep = ";",
header = TRUE)
# code "?" as missing data and convert to NA
pwrConsData[pwrConsData == "?"] <- NA
# convert date and time column classes
pwrConsData[,"Date"] = as.Date(pwrConsData[, "Date"], format = "%d/%m/%Y")
pwrConsData[, "Time"] = format(strptime(pwrConsData[, "Time"], format = "%H:%M:%S"),
"%H:%M:%S")
}
lapply
?lapply
names(pwrConsData[,3:length(pwrConsData)]
)
lapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
data[, x] = as.numeric(data[, x]))
lapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]))
temp <- lapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]))
emp
temp <- vapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]))
temp2 <- unlist(temp)
head(temp)
?vapply
as.matrix(temp)
temp2<-as.matrix(temp)
temp <- vapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]),
FUN.VALUE = pwrConsData[,3:length(pwrConsData)])
temp <- vapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]), FUN.VALUE = 1)
temp <- vapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]), FUN.VALUE = length(pwrConsData[,1]))
temp <- vapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]), FUN.VALUE = c(2075259, 7))
temp <- vapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x]), FUN.VALUE = c(7, 2075259))
pwrConsData[,3:length(pwrConsData)] <- as.matrix(vapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x])))
pwrConsData[,3:length(pwrConsData)] <- as.matrix(lapply(names(pwrConsData[,3:length(pwrConsData)]), function(x)
pwrConsData[, x] = as.numeric(pwrConsData[, x])))
?plot
?hist
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 12)
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 16)
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8)
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xlim = c(0,6))
?tck
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,6,2))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,6,3))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,12,2))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,6,6))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,8,6))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,6,8))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,6,12))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,6,3))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,12,6))
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8, xaxp = c(0,12,6), xlim = c(0,6))
?xlab
title(main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8,
xaxp = c(0,12,6), xlim = c(0,6),
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
?hist
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8,
xaxp = c(0,12,6), xlim = c(0,6),
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
col = "red")
png(filename = "plot1.png", width = 480, height = 480, units = "px",
type = "windows")
hist(pwrConsData[, "Global_active_power"]/1000, breaks = 8,
xaxp = c(0,12,6), xlim = c(0,6),
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
col = "red")
dev.off()
hist(pwrConsData[, "Global_active_power"]/1000,
axes = FALSE,
breaks = 8,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
col = "red")
axis(side = 1, at = c(0,2,4,6))
axis(side = 2, at = c(0, 200, 400, 600, 800, 1000))
